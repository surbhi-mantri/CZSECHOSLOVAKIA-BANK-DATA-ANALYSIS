USE DATABASE BANK_DATA

----------TABLE CREATION----------

CREATE OR REPLACE TABLE SM_ACCOUNT(
ACCOUNT_ID INTEGER PRIMARY KEY,
DISTRICT_ID INTEGER,
FREQUENCY VARCHAR(40),
DATE DATE,
ACCOUNT_TYPE VARCHAR(100),
CARD_ASSIGNED VARCHAR(20),
FOREIGN KEY (DISTRICT_ID) references SM_DISTRICT(DISTRICT_CODE) 
)

CREATE OR REPLACE TABLE SM_CARD(
CARD_ID INTEGER PRIMARY KEY,
DISP_ID INTEGER,
TYPE VARCHAR(20),
ISSUED DATE,
FOREIGN KEY (DISP_ID) references SM_DISPOSITION(DISP_ID)
)

CREATE OR REPLACE TABLE SM_CLIENT(
CLIENT_ID INTEGER PRIMARY KEY,
SEX VARCHAR(10),
BIRTH_NUMBER DATE,
DISTRICT_ID INTEGER,
FOREIGN KEY (DISTRICT_ID) references SM_DISTRICT(DISTRICT_CODE)
)

CREATE OR REPLACE TABLE SM_DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities	INT,
Ratio_of_urban_inhabitants	FLOAT,
Average_salary	INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
)

CREATE OR REPLACE TABLE SM_ORDER_LIST (
ORDER_ID	INT PRIMARY KEY,
ACCOUNT_ID	INT,
BANK_TO	VARCHAR(45),
ACCOUNT_TO	INT,
AMOUNT FLOAT,
FOREIGN KEY (ACCOUNT_ID) references SM_ACCOUNT(ACCOUNT_ID)
)

CREATE OR REPLACE TABLE SM_LOAN(
LOAN_ID	INT ,
ACCOUNT_ID	INT,
DATE	DATE,
AMOUNT	INT,
DURATION	INT,
PAYMENTS	INT,
`STATUS` VARCHAR(35),
FOREIGN KEY (ACCOUNT_ID) references SM_ACCOUNT(ACCOUNT_ID)
)

CREATE OR REPLACE TABLE SM_TRANSACTIONS(
TRANS_ID INT,	
ACCOUNT_ID INT,
DATE DATE,
TYPE VARCHAR(30),
OPERATION VARCHAR(40),
AMOUNT	INT,
BALANCE FLOAT,
PURPOSE VARCHAR(40),
BANK VARCHAR(45),
ACCOUNT_PARTNER_ID INT,
FOREIGN KEY (ACCOUNT_ID) references SM_ACCOUNT(ACCOUNT_ID)
)

CREATE OR REPLACE TABLE SM_DISPOSITION(
DISP_ID	INT PRIMARY KEY,
CLIENT_ID INT,
ACCOUNT_ID	INT,
TYPE CHAR(15),
FOREIGN KEY (ACCOUNT_ID) references SM_ACCOUNT(ACCOUNT_ID),
FOREIGN KEY (CLIENT_ID) references SM_CLIENT(CLIENT_ID)
)

----------CREATION OF STORAGE INTEGRATION----------

CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::539969916458:role/banking_role'
STORAGE_ALLOWED_LOCATIONS =('s3://czechoslobankdata/')

----------CREATION OF PIPE----------

CREATE OR REPLACE PIPE ACCOUNT_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_ACCOUNT
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

CREATE OR REPLACE PIPE CARD_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_CARD
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

CREATE OR REPLACE PIPE CLIENT_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_CLIENT
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

CREATE OR REPLACE PIPE LOAN_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_LOAN
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

CREATE OR REPLACE PIPE ORDER_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_ORDER_LIST
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

CREATE OR REPLACE PIPE DISP_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_DISPOSITION
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

CREATE OR REPLACE PIPE DIST_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_DISTRICT
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

CREATE OR REPLACE PIPE TXN_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_TRANSACTIONS
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT') FORCE=TRUE;

CREATE OR REPLACE PIPE CLIENT_SNOWPIPE
AUTO_INGEST = TRUE
AS COPY INTO BANK_DATA.PUBLIC.SM_CLIENT
FROM @BANK_STAGEPIPE
FILE_FORMAT = ( FORMAT_NAME = 'CSV_FORMAT')

----------AFTER LOADING DATA FROM S3 BUCKET----------

SHOW PIPES
ALTER PIPE DIST_SNOWPIPE refresh
SELECT COUNT(*) FROM SM_DISTRICT
ALTER PIPE ACCOUNT_SNOWPIPE refresh
SELECT COUNT(*) FROM SM_ACCOUNT
ALTER PIPE CARD_SNOWPIPE refresh
SELECT COUNT(*) FROM SM_CARD
ALTER PIPE CLIENT_SNOWPIPE refresh
SELECT count(*) FROM SM_CLIENT
ALTER PIPE LOAN_SNOWPIPE refresh
SELECT COUNT(*) FROM SM_LOAN
ALTER PIPE ORDER_SNOWPIPE refresh
SELECT COUNT(*) FROM SM_ORDER_LIST
ALTER PIPE TXN_SNOWPIPE refresh
SELECT COUNT(*) FROM SM_TRANSACTIONS

----------EDA IN SQL----------

CREATE OR REPLACE TABLE SM_TRANSACTIONS AS (
SELECT * FROM SM_TRANSACTIONS_COPY)

SELECT MIN(DATE),MAX(DATE) FROM SM_TRANSACTIONS
ALTER TABLE SM_CLIENT ADD COLUMN AGE INTEGER

UPDATE SM_CLIENT SET AGE=DATEDIFF('YEAR',BIRTH_NUMBER,'2022-12-31')
SELECT * FROM SM_CLIENT

SELECT YEAR(DATE) AS TXN_YEAR, COUNT(*) AS TOTAL_TXNS FROM SM_TRANSACTIONS
WHERE BANK IS NULL GROUP BY 1 ORDER BY 1

UPDATE SM_TRANSACTIONS_COPY SET DATE=DATEADD('YEAR',1,DATE) WHERE YEAR(DATE)=2016 OR YEAR(DATE)=2020

SELECT YEAR(DATE) AS TXN_YEAR, COUNT(*) AS TOTAL_TXNS FROM SM_TRANSACTIONS_COPY
WHERE BANK IS NULL GROUP BY 1 ORDER BY 1

SELECT MIN(DATE),MAX(DATE) FROM SM_TRANSACTIONS_COPY
SELECT COUNT(*) FROM SM_TRANSACTIONS_COPY WHERE BANK IS NULL AND YEAR(DATE)=2017
UPDATE SM_TRANSACTIONS_COPY SET BANK='Sky Bank' WHERE BANK IS NULL AND YEAR(DATE)=2022
UPDATE SM_TRANSACTIONS_COPY SET BANK='DBS Bank' WHERE BANK IS NULL AND YEAR(DATE)=2021
UPDATE SM_TRANSACTIONS_COPY SET BANK='Northern Bank' WHERE BANK IS NULL AND YEAR(DATE)=2019
UPDATE SM_TRANSACTIONS_COPY SET BANK='Southern Bank' WHERE BANK IS NULL AND YEAR(DATE)=2018
UPDATE SM_TRANSACTIONS_COPY SET BANK='ADB Bank' WHERE BANK IS NULL AND YEAR(DATE)=2017

SELECT YEAR(DATE) AS TXN_YEAR, COUNT(*) AS TOTAL_TXNS FROM SM_TRANSACTIONS_COPY
GROUP BY 1 ORDER BY 1

SELECT * FROM SM_CARD

SELECT DISTINCT YEAR(ISSUED) FROM SM_CARD
SELECT COUNT(*) AS ACCOUNTS, YEAR(DATE) AS YEAR FROM SM_ACCOUNT GROUP BY 2 ORDER BY 2 DESC

-----FINDING MALE FEMALE %
SELECT ROUND(SUM(CASE WHEN SEX='Male' THEN 1 ELSE 0 END)/COUNT(*)*100,2) AS MALE_PERC,
ROUND(SUM(CASE WHEN SEX='Female' THEN 1 ELSE 0 END)/COUNT(*)*100,2) AS FEMALE_PERC
FROM SM_CLIENT
SELECT * FROM SM_DISTRICT
select * from sm_account
truncate table sm_account
----------What is the demographic profile of the bank's clients and how does it vary across districts?
CREATE OR REPLACE TABLE CZSECH_DEMOFRAPHICH_DATA_KPI AS
SELECT C.DISTRICT_ID,D.DISTRICT_NAME,D.AVERAGE_SALARY,ROUND(AVG(C.AGE)) AS AVG_AGE,
SUM(CASE WHEN SEX='Male' THEN 1 ELSE 0 END) AS MALE_CLIENT, SUM(CASE WHEN SEX='Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT,
ROUND((FEMALE_CLIENT/MALE_CLIENT)*100,2) AS FEMALE_MALE_RATIO_PERC FROM SM_CLIENT C, SM_DISTRICT D WHERE C.DISTRICT_ID=D.DISTRICT_CODE
GROUP BY 1,2,3 ORDER BY 1
SELECT * FROM CZSECH_DEMOFRAPHICH_DATA_KPI

----------How the banks have performed over the years. Give their detailed analysis year & month-wise.

--ASSUMING EVERY LAST MONTH CUSTOMER ACCOUNT IS GETTING TXNCTED

CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS
SELECT LTD.*,TXN.BALANCE
FROM SM_TRANSACTIONS AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
   MONTH(DATE) AS TXN_MONTH,
   MAX(DATE) AS LATEST_TXN_DATE
   FROM SM_TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LTD.LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH;

SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE;

SELECT LATEST_TXN_DATE,COUNT(*) AS TOT_TXNS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;
------------------------------------------------------------------------------------------------
CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALWB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM SM_TRANSACTIONS AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  SM_ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;
SELECT * FROM SM_ACCOUNT ORDER BY ACCOUNT_ID
SELECT * FROM SM_DISPOSITION ORDER BY ACCOUNT_ID
SELECT COUNT(*) FROM SM_DISPOSITION
SELECT * FROM SM_LOAN
CREATE OR REPLACE TABLE CARD AS
SELECT C.CARD_ID,C.TYPE AS CARD_TYPE, A.ACCOUNT_TYPE,T.*,D.DISP_ID  FROM SM_ACCOUNT A INNER JOIN SM_DISPOSITION D INNER JOIN SM_CARD C
INNER JOIN SM_TRANSACTIONS T ON C.DISP_ID=D.DISP_ID AND D.ACCOUNT_ID=A.ACCOUNT_ID AND A.ACCOUNT_ID=T.ACCOUNT_ID
SELECT * FROM SM_DISPOSITION D INNER JOIN SM_ACCOUNT A ON D.ACCOUNT_ID=A.ACCOUNT_ID 

CREATE OR REPLACE TABLE TOP_ACCOUNTS_LOAN AS
SELECT LOAN_ID,ACCOUNT_ID,`STATUS`,SUM(AMOUNT) AS TOT_AMOUNT FROM SM_LOAN WHERE `STATUS`='Contract Finished' OR `STATUS`= 'Running Contract' 
GROUP BY 2,1,3 ORDER BY TOT_AMOUNT DESC
SELECT * FROM TOP_10
SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE
CREATE OR REPLACE TABLE TOP_10 AS
SELECT DISTINCT B.TOT_AMOUNT, A.ACCOUNT_ID AS ACC_ID,SUM(A.BALANCE) AS BALANCE, B.LOAN_ID,B.`STATUS`,B.ACCOUNT_ID FROM 
ACC_LATEST_TXNS_WITH_BALANCE A INNER JOIN TOP_ACCOUNTS_LOAN B ON A.ACCOUNT_ID=B.ACCOUNT_ID GROUP BY 2,5,4,1,6
ORDER BY BALANCE DESC,B.TOT_AMOUNT DESC LIMIT 10